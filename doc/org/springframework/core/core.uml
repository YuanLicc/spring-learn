<?xml version="1.0" encoding="UTF-8"?>
<Diagram>
  <ID>JAVA</ID>
  <OriginalElement>org.springframework.core</OriginalElement>
  <nodes>
    <node x="1212.1875" y="116.0">org.springframework.core.ParameterNameDiscoverer</node>
    <node x="1753.6875" y="331.0">org.springframework.core.KotlinReflectionParameterNameDiscoverer</node>
    <node x="566.5" y="1136.0">org.springframework.core.annotation</node>
    <node x="531.0" y="1761.0">org.springframework.core.Conventions</node>
    <node x="432.0" y="2194.0">org.springframework.core.style</node>
    <node x="937.5" y="1761.0">org.springframework.core.InfrastructureProxy</node>
    <node x="558.0555555555555" y="1050.0">org.springframework.core.MethodParameter</node>
    <node x="128.5" y="1596.0">org.springframework.core.Constants</node>
    <node x="1623.5" y="1345.0">org.springframework.core.ResolvableType</node>
    <node x="682.5" y="1367.0">org.springframework.core.SpringProperties</node>
    <node x="1095.0" y="2113.0">org.springframework.core.GenericTypeResolver</node>
    <node x="563.0" y="2113.0">org.springframework.core.NestedExceptionUtils</node>
    <node x="984.5" y="1574.0">org.springframework.core.ReactiveAdapterRegistry</node>
    <node x="392.5" y="1948.0">org.springframework.core.ConfigurableObjectInputStream</node>
    <node x="1844.5" y="2113.0">org.springframework.core.SpringVersion</node>
    <node x="309.5" y="2113.0">org.springframework.core.ReactiveAdapter</node>
    <node x="116.55555555555554" y="1050.0">org.springframework.core.NestedRuntimeException</node>
    <node x="0.0" y="2194.0">org.springframework.core.serializer</node>
    <node x="250.5" y="863.0">org.springframework.core.OverridingClassLoader</node>
    <node x="445.0" y="331.0">org.springframework.core.PrioritizedParameterNameDiscoverer</node>
    <node x="848.25" y="821.0">org.springframework.core.PriorityOrdered</node>
    <node x="1344.6875" y="331.0">org.springframework.core.LocalVariableTableParameterNameDiscoverer</node>
    <node x="799.0" y="1948.0">org.springframework.core.NamedThreadLocal</node>
    <node x="228.0" y="1301.0">org.springframework.core.AliasRegistry</node>
    <node x="1156.0" y="1345.0">org.springframework.core.SmartClassLoader</node>
    <node x="1666.5555555555557" y="1028.0">org.springframework.core.AttributeAccessor</node>
    <node x="1483.5555555555557" y="1114.0">org.springframework.core.AttributeAccessorSupport</node>
    <node x="0.0" y="2113.0">org.springframework.core.ReactiveTypeDescriptor</node>
    <node x="622.0" y="2194.0">org.springframework.core.task</node>
    <node x="964.5" y="735.0">org.springframework.core.Ordered</node>
    <node x="1131.5" y="1948.0">org.springframework.core.MethodIntrospector</node>
    <node x="32.5" y="1948.0">org.springframework.core.ParameterizedTypeReference</node>
    <node x="417.0" y="734.0">org.springframework.core.DecoratingClassLoader</node>
    <node x="1160.0" y="2194.0">org.springframework.core.io</node>
    <node x="829.0" y="2113.0">org.springframework.core.BridgeMethodResolver</node>
    <node x="532.5" y="1574.0">org.springframework.core.ResolvableTypeProvider</node>
    <node x="1474.0" y="1948.0">org.springframework.core.MethodClassKey</node>
    <node x="1779.5" y="1948.0">org.springframework.core.KotlinDetector</node>
    <node x="986.0" y="2194.0">org.springframework.core.env</node>
    <node x="0.0" y="1136.0">org.springframework.core.codec</node>
    <node x="164.99999999999994" y="1136.0">org.springframework.core.convert</node>
    <node x="1416.5" y="1574.0">org.springframework.core.NestedCheckedException</node>
    <node x="100.75" y="1387.0">org.springframework.core.SimpleAliasRegistry</node>
    <node x="54.5" y="1783.0">org.springframework.core.ExceptionDepthComparator</node>
    <node x="1772.0" y="1761.0">org.springframework.core.NamedInheritableThreadLocal</node>
    <node x="935.6875" y="331.0">org.springframework.core.StandardReflectionParameterNameDiscoverer</node>
    <node x="1388.5" y="1761.0">org.springframework.core.DecoratingProxy</node>
    <node x="1353.0" y="2113.0">org.springframework.core.NestedIOException</node>
    <node x="950.5555555555555" y="1050.0">org.springframework.core.OrderComparator</node>
    <node x="1833.5" y="1574.0">org.springframework.core.SerializableTypeWrapper</node>
    <node x="1595.0" y="2113.0">org.springframework.core.CollectionFactory</node>
    <node x="804.0" y="2194.0">org.springframework.core.type</node>
    <node x="261.5" y="504.0">org.springframework.core.DefaultParameterNameDiscoverer</node>
    <node x="230.0" y="2194.0">org.springframework.core.package-info</node>
  </nodes>
  <notes>
    <note x="1202.6875" y="0.0">
      <node>org.springframework.core.ParameterNameDiscoverer</node>
      <value>获取构造器及方法的参数名称的接口。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="835.0" y="585.0">
      <node>org.springframework.core.Ordered</node>
      <value>实现此接口的类应该表示为：可排序的。其中getOrder()\n方法返回的数字可理解为优先级，数字越小优先级越大，\n简单的说就是排队，而order 就是排队的顺序，小的当然\n优先。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="50.0" />
      </edge>
    </note>
    <note x="1901.4375" y="117.0">
      <node>org.springframework.core.KotlinReflectionParameterNameDiscoverer</node>
      <value>通过 kotlin 的反射来内观参数名称。</value>
      <edge>
        <point x="93.25" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="1088.0" y="1864.0">
      <node>org.springframework.core.MethodIntrospector</node>
      <value>查找元数据相关的方法。这是一个工具类。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="0.0" y="1864.0">
      <node>org.springframework.core.ParameterizedTypeReference</node>
      <value>参数化的类型（java.lang.reflect.Type）引用。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="343.5" y="585.0">
      <node>org.springframework.core.DecoratingClassLoader</node>
      <value>ClassLoader 的装饰类，相对于 ClassLoader，此类新增\n了排除加载包和类的方法。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="28.0" />
      </edge>
    </note>
    <note x="407.0" y="1677.0">
      <node>org.springframework.core.Conventions</node>
      <value>Spring 内部的命名约定，提供如参数、类名等的命名方法。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="435.0" y="1468.0">
      <node>org.springframework.core.ResolvableTypeProvider</node>
      <value>ResolvableType 的提供者，即此接口的实例持有 ResolvableType\n类型的实例，并且可通过方法获取。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="28.0" />
      </edge>
    </note>
    <note x="849.5" y="2029.0">
      <node>org.springframework.core.BridgeMethodResolver</node>
      <value>桥接方法的解析工具类。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="1425.0" y="1864.0">
      <node>org.springframework.core.MethodClassKey</node>
      <value>以 Method、Class 为 Key 的 Key 类。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="1741.0" y="1864.0">
      <node>org.springframework.core.KotlinDetector</node>
      <value>检测 Kotlin 是否存在并识别类型。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="849.0" y="1677.0">
      <node>org.springframework.core.InfrastructureProxy</node>
      <value>此接口由需要被认为与隐藏资源相等的透明资源代理实现。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="453.55555555555554" y="944.0">
      <node>org.springframework.core.MethodParameter</node>
      <value>定义了方法的参数的如同实体一样的类，但此类提供了简单\n的构造参数就可构造出实例，它实现了构造实例的方法。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="28.0" />
      </edge>
    </note>
    <note x="0.0" y="1468.0">
      <node>org.springframework.core.Constants</node>
      <value>针对 public static final 修饰的常量，此类可通过类\n进行初始化，初始化会解析这样的常量并缓存，提供了一些\n方法来获取这些常量信息。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="39.0" />
      </edge>
    </note>
    <note x="1511.5" y="1217.0">
      <node>org.springframework.core.ResolvableType</node>
      <value>对 java.lang.reflect.Type 的包装，可通过一个静态方法\n实例化此类，并通过实例获取有关 java.lang.reflect.Type\n的相关信息。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="39.0" />
      </edge>
    </note>
    <note x="564.5" y="1217.0">
      <node>org.springframework.core.SpringProperties</node>
      <value>本地 Spring properties 的存储类，static 代码块中读取\nSpring 包的根 classpath的 spring.properties 文件。当然\n也含属性的 set 方法。当进行属性的获取时，首先检查此类本地\n的属性，然后检查系统属性：System#getProperty()</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="50.0" />
      </edge>
    </note>
    <note x="604.5" y="2029.0">
      <node>org.springframework.core.NestedExceptionUtils</node>
      <value>嵌套异常工具类。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="1118.5" y="2029.0">
      <node>org.springframework.core.GenericTypeResolver</node>
      <value>泛型类型解析工具类。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="912.0" y="1468.0">
      <node>org.springframework.core.ReactiveAdapterRegistry</node>
      <value>响应式适配器注册器。这与 RxJava 相关，我也不懂，大致\n了解了一下，是 Android 端类库。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="28.0" />
      </edge>
    </note>
    <note x="1347.0" y="1468.0">
      <node>org.springframework.core.NestedCheckedException</node>
      <value>对 Exception 的扩展，源码与 NestedRuntimeException\n相同。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="28.0" />
      </edge>
    </note>
    <note x="379.0" y="1864.0">
      <node>org.springframework.core.ConfigurableObjectInputStream</node>
      <value>ObjectImputStream 的扩展，可指定类加载器。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="1837.0" y="2029.0">
      <node>org.springframework.core.SpringVersion</node>
      <value>可获取 Spring 的版本。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="36.55555555555554" y="944.0">
      <node>org.springframework.core.NestedRuntimeException</node>
      <value>封装 RuntimeException 及持有一个名为 rootCause 的异常\n实例，还提供了获取它的方法。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="28.0" />
      </edge>
    </note>
    <note x="282.0" y="2029.0">
      <node>org.springframework.core.ReactiveAdapter</node>
      <value>RXJava 中 Publisher 的适配器。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="0.0" y="1302.0">
      <node>org.springframework.core.SimpleAliasRegistry</node>
      <value>AliasRegistry 的简单实现。</value>
      <edge>
        <point x="-53.25" y="-18.0" />
        <point x="154.0" y="1362.0" />
        <point x="104.0" y="1362.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="0.0" y="1677.0">
      <node>org.springframework.core.ExceptionDepthComparator</node>
      <value>异常深度比较器。什么是异常的深度，从当前向上直到\n没有cause 为止的深度被称为异常的深度。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="28.0" />
      </edge>
    </note>
    <note x="1719.0" y="1677.0">
      <node>org.springframework.core.NamedInheritableThreadLocal</node>
      <value>扩展自 InheritableThreadLocal 新增了一个字段 name。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="0.0" y="691.0">
      <node>org.springframework.core.OverridingClassLoader</node>
      <value>相比于其父类，此类重写了 ClassLoader 的 loadClass\n方法，此方法的实现不再优先委托其父加载器加载类，而是\n在判断是否允许重载加载器加载后，选定是否使用此类中持\n有的 overridingClassLoader 来加载，若不允许则委托其父\n加载器进行类加载。</value>
      <edge>
        <point x="-57.25" y="-18.0" />
        <point x="307.75" y="838.0" />
        <point x="198.5" y="838.0" />
        <point x="0.0" y="61.0" />
      </edge>
    </note>
    <note x="284.25" y="84.0">
      <node>org.springframework.core.PrioritizedParameterNameDiscoverer</node>
      <value>获取参数名称：此类定义了一个字段存储 ParameterNameDiscoverer 的\n列表，当获取参数名称时，会遍历这些 discoverer，只要返回不为\n空即返回，否则继续通过下一个 discoverer 获取，存在最终及结果为null\n的情况。</value>
      <edge>
        <point x="-83.25" y="-18.0" />
        <point x="0.0" y="50.0" />
      </edge>
    </note>
    <note x="792.25" y="106.0">
      <node>org.springframework.core.StandardReflectionParameterNameDiscoverer</node>
      <value>通过 Jdk 8 引入的 Parameter 获取参数名称，使用此类\n需要编译含 -parameters 的 flag。</value>
      <edge>
        <point x="-97.25" y="-18.0" />
        <point x="1032.9375" y="204.0" />
        <point x="980.25" y="204.0" />
        <point x="0.0" y="28.0" />
      </edge>
    </note>
    <note x="1284.0" y="1677.0">
      <node>org.springframework.core.DecoratingProxy</node>
      <value>装饰代理接口，此接口的实现类应该表示没有层级的代理。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="1375.5" y="2029.0">
      <node>org.springframework.core.NestedIOException</node>
      <value>IoException 子类。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="764.5" y="736.0">
      <node>org.springframework.core.PriorityOrdered</node>
      <value>优先级可排序标志接口。</value>
      <edge>
        <point x="-45.25" y="-18.0" />
        <point x="893.5" y="796.0" />
        <point x="854.5" y="796.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="1539.625" y="117.0">
      <node>org.springframework.core.LocalVariableTableParameterNameDiscoverer</node>
      <value>通过类的变量表获取参数名称。</value>
      <edge>
        <point x="97.25" y="-18.0" />
        <point x="1636.4375" y="224.0" />
        <point x="1650.625" y="224.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="863.5555555555555" y="955.0">
      <node>org.springframework.core.OrderComparator</node>
      <value>实现了 Ordered 接口的可排序类型的比较器实现类。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="744.0" y="1864.0">
      <node>org.springframework.core.NamedThreadLocal</node>
      <value>扩展自 ThreadLocal ，新增了 name 属性。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="101.5" y="1217.0">
      <node>org.springframework.core.AliasRegistry</node>
      <value>管理别名的公共接口，为 BeanDefinitionRegistry 提供服务。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="1768.0" y="1468.0">
      <node>org.springframework.core.SerializableTypeWrapper</node>
      <value>将 java.lang.reflect.Type 相关的信息资源转换为可序\n列化的对象，如 filed。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="28.0" />
      </edge>
    </note>
    <note x="1645.5" y="2029.0">
      <node>org.springframework.core.CollectionFactory</node>
      <value>集合工厂。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="1034.5" y="1217.0">
      <node>org.springframework.core.SmartClassLoader</node>
      <value>由 reloading-aware 的类加载器实现此接口。若类加载器未实现\n此接口，那么就认为从这样的类加载器获取的类是不可被重新加载\n的（即可被缓存的）。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="39.0" />
      </edge>
    </note>
    <note x="1584.0555555555557" y="944.0">
      <node>org.springframework.core.AttributeAccessor</node>
      <value>接口定义了对任意对象访问和连接元数据的通用约定。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="1263.5555555555557" y="1029.0">
      <node>org.springframework.core.AttributeAccessorSupport</node>
      <value>AttributeAccessors 的支持类，实现了所有的接口方法。</value>
      <edge>
        <point x="-63.25" y="-18.0" />
        <point x="1546.8055555555557" y="1089.0" />
        <point x="1455.0555555555557" y="1089.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="0.0" y="244.0">
      <node>org.springframework.core.DefaultParameterNameDiscoverer</node>
      <value>默认实现，可能会使用以下几种获取参数名称的实现：\nStandardReflectionParameterNameDiscoverer\nLocalVariableTableParameterNameDiscoverer\nKotlinReflectionParameterNameDiscoverer\n当确认为 kotlin 时，仅仅会添加 Kotlin 实现方式，若\n不是则会添加其他两种 Discoverer，这意味着在调用获取\n参数的方法时，会遍历这两种方式获取参数名称，如其父类\n的注释一样，成功则返回，不成功继续通过列表内的 Discoverer\n获取，可能返回 null。</value>
      <edge>
        <point x="-75.25" y="-18.0" />
        <point x="336.75" y="479.0" />
        <point x="212.5" y="479.0" />
        <point x="0.0" y="105.0" />
      </edge>
    </note>
    <note x="21.5" y="2029.0">
      <node>org.springframework.core.ReactiveTypeDescriptor</node>
      <value>响应式类型的信息描述器。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
  </notes>
  <edges>
    <edge source="org.springframework.core.codec" target="org.springframework.core.NestedRuntimeException">
      <point x="0.0" y="-18.0" />
      <point x="72.5" y="1111.0" />
      <point x="156.05555555555554" y="1111.0" />
      <point x="-79.0" y="18.0" />
    </edge>
    <edge source="org.springframework.core.DefaultParameterNameDiscoverer" target="org.springframework.core.PrioritizedParameterNameDiscoverer">
      <point x="75.25" y="-18.0" />
      <point x="487.25" y="479.0" />
      <point x="611.5" y="479.0" />
      <point x="0.0" y="18.0" />
    </edge>
    <edge source="org.springframework.core.SimpleAliasRegistry" target="org.springframework.core.AliasRegistry">
      <point x="53.25" y="-18.0" />
      <point x="260.5" y="1362.0" />
      <point x="310.5" y="1362.0" />
      <point x="0.0" y="18.0" />
    </edge>
    <edge source="org.springframework.core.annotation" target="org.springframework.core.NestedRuntimeException">
      <point x="-61.66666666666663" y="-18.0" />
      <point x="597.3333333333333" y="1111.0" />
      <point x="314.05555555555554" y="1111.0" />
      <point x="79.0" y="18.0" />
    </edge>
    <edge source="org.springframework.core.StandardReflectionParameterNameDiscoverer" target="org.springframework.core.ParameterNameDiscoverer">
      <point x="97.25" y="-18.0" />
      <point x="1227.4375" y="224.0" />
      <point x="1304.0625" y="224.0" />
      <point x="-30.625" y="18.0" />
    </edge>
    <edge source="org.springframework.core.PrioritizedParameterNameDiscoverer" target="org.springframework.core.ParameterNameDiscoverer">
      <point x="83.25" y="-18.0" />
      <point x="694.75" y="214.0" />
      <point x="1242.8125" y="214.0" />
      <point x="-91.875" y="18.0" />
    </edge>
    <edge source="org.springframework.core.annotation" target="org.springframework.core.MethodParameter">
      <point x="0.0" y="-18.0" />
      <point x="659.0" y="1111.0" />
      <point x="648.5555555555555" y="1111.0" />
      <point x="0.0" y="18.0" />
    </edge>
    <edge source="org.springframework.core.convert" target="org.springframework.core.NestedRuntimeException">
      <point x="0.0" y="-18.0" />
      <point x="245.49999999999994" y="1111.0" />
      <point x="235.05555555555554" y="1111.0" />
      <point x="0.0" y="18.0" />
    </edge>
    <edge source="org.springframework.core.PriorityOrdered" target="org.springframework.core.Ordered">
      <point x="45.25" y="-18.0" />
      <point x="984.0" y="796.0" />
      <point x="1023.0" y="796.0" />
      <point x="0.0" y="18.0" />
    </edge>
    <edge source="org.springframework.core.KotlinReflectionParameterNameDiscoverer" target="org.springframework.core.ParameterNameDiscoverer">
      <point x="-93.25" y="-18.0" />
      <point x="1846.9375" y="214.0" />
      <point x="1426.5625" y="214.0" />
      <point x="91.875" y="18.0" />
    </edge>
    <edge source="org.springframework.core.LocalVariableTableParameterNameDiscoverer" target="org.springframework.core.ParameterNameDiscoverer">
      <point x="-97.25" y="-18.0" />
      <point x="1441.9375" y="224.0" />
      <point x="1365.3125" y="224.0" />
      <point x="30.625" y="18.0" />
    </edge>
    <edge source="org.springframework.core.AttributeAccessorSupport" target="org.springframework.core.AttributeAccessor">
      <point x="63.25" y="-18.0" />
      <point x="1673.3055555555557" y="1089.0" />
      <point x="1765.0555555555557" y="1089.0" />
      <point x="0.0" y="18.0" />
    </edge>
    <edge source="org.springframework.core.annotation" target="org.springframework.core.OrderComparator">
      <point x="61.66666666666663" y="-18.0" />
      <point x="720.6666666666665" y="1111.0" />
      <point x="1041.0555555555557" y="1111.0" />
      <point x="0.0" y="18.0" />
    </edge>
    <edge source="org.springframework.core.OverridingClassLoader" target="org.springframework.core.DecoratingClassLoader">
      <point x="57.25" y="-18.0" />
      <point x="422.25" y="838.0" />
      <point x="531.5" y="838.0" />
      <point x="0.0" y="18.0" />
    </edge>
  </edges>
  <settings layout="Hierarchic Group" zoom="0.967111111111111" x="944.8167925758645" y="1929.6714154411766" />
  <SelectedNodes>
    <node>org.springframework.core.type</node>
  </SelectedNodes>
  <Categories />
  <SCOPE>All</SCOPE>
  <VISIBILITY>public</VISIBILITY>
</Diagram>

