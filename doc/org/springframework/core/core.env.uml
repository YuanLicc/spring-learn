<?xml version="1.0" encoding="UTF-8"?>
<Diagram>
  <ID>JAVA</ID>
  <OriginalElement>org.springframework.core.env</OriginalElement>
  <nodes>
    <node x="1234.7175925925926" y="1922.0">org.springframework.core.env.CommandLinePropertySource</node>
    <node x="1626.4675925925926" y="116.0">org.springframework.core.env.PropertySource</node>
    <node x="1196.75" y="3267.0">org.springframework.core.env.ConfigurablePropertyResolver</node>
    <node x="1432.2175925925926" y="860.0">org.springframework.core.env.EnumerablePropertySource</node>
    <node x="1392.8861111111112" y="3604.0">org.springframework.core.env.AbstractPropertyResolver</node>
    <node x="1389.0925925925926" y="2326.0">org.springframework.core.env.JOptCommandLinePropertySource</node>
    <node x="734.0925925925925" y="2326.0">org.springframework.core.env.SimpleCommandLinePropertySource</node>
    <node x="968.0" y="4114.0">org.springframework.core.env.MissingRequiredPropertiesException</node>
    <node x="662.875" y="3604.0">org.springframework.core.env.ConfigurableEnvironment</node>
    <node x="780.375" y="2721.0">org.springframework.core.env.PropertyResolver</node>
    <node x="162.5" y="4136.0">org.springframework.core.env.EnvironmentCapable</node>
    <node x="3633.886111111111" y="2535.0">org.springframework.core.env.ReadOnlySystemAttributesMap</node>
    <node x="2352.5925925925926" y="2326.0">org.springframework.core.env.PropertiesPropertySource</node>
    <node x="1273.5" y="3949.0">org.springframework.core.env.StandardEnvironment</node>
    <node x="1984.5925925925926" y="2326.0">org.springframework.core.env.SystemEnvironmentPropertySource</node>
    <node x="2867.886111111111" y="2501.0">org.springframework.core.env.PropertySources</node>
    <node x="2349.886111111111" y="2865.0">org.springframework.core.env.SimpleCommandLineArgsParser</node>
    <node x="598.9999999999999" y="1922.0">org.springframework.core.env.CompositePropertySource</node>
    <node x="658.5" y="4136.0">org.springframework.core.env.CommandLineArgs</node>
    <node x="330.375" y="3267.0">org.springframework.core.env.Environment</node>
    <node x="2230.7175925925926" y="1922.0">org.springframework.core.env.MapPropertySource</node>
    <node x="1676.0" y="4030.0">org.springframework.core.env.package-info</node>
    <node x="2996.136111111111" y="2597.0">org.springframework.core.env.MutablePropertySources</node>
    <node x="1364.8861111111112" y="3787.0">org.springframework.core.env.PropertySourcesPropertyResolver</node>
    <node x="859.875" y="3787.0">org.springframework.core.env.AbstractEnvironment</node>
    <node x="1346.0" y="4030.0">org.springframework.core.env.PropertyResolverExtensionsKt</node>
  </nodes>
  <notes>
    <note x="871.7499999999999" y="212.0">
      <node>org.springframework.core.env.CommandLinePropertySource</node>
      <value>支持命令行参数的 PropertySource 的抽象基类。\n1）目的与普通用法：\n对于独立的基于Spring 的应用，即传统的通过main 方法\n引导且由 main 方法接收命令行参数。通常情况下在 main\n方法内处理参数已经足够了，但是在个别情况下需要注入参\n数到 Spring bean 中。在这种情况下，此类就显得有用了。\n通常当前类类型的实例会被添加到 ApplicationContext 的\nEnvironment 中，可以通过 Environment.getProperty()方\n法获取：\nCommandLinePropertySource cps = ...;\nAnnotationConfigApplicationContext ctx = new ...;\nctx.getEnvironment().getPropertySources().addFirst(clps);\nctx.register(AppConfig.class);\nctx,refresh();\n在上面的示例中，可以在AppConfig 中注入Environment 使得\n可以在类中直接访问 Environment：\npublic class AppConfig {\n  @Inject\n  Environment env;\n\n  @Bean\n  public void DataSource dataSource() {\n    XXDataSource ds = ...\n    ds.setUsername(env.getRequiredProperty(\"db.username\"));\n    ...\n    return ds;\n  }\n}\n因为前面main 方法内将此类的实例添加到了 Environment 的存储\n此类的一个集合中，且使用的是 addFirst()方法，所以是最高优\n先级，这意味着若其它属性 source 也存在db.username 等属性时，\n优先选择command line Property。\n\n2）使用 option 参数\n个人的命令行参数与也属于属性，即 name/value。如下面的命令行：\n--o1=v1 --o2\no1 和 o2 被当做option 参数，并且下面这些断言都为true：\nCommandLinePropertySource cps = ...;\nassert cps.containsProperty(\"o1\") == true;\nassert cps.containsProperty(\"o2\") == true;\nassert cps.containsProperty(\"o3\") == false;\nassert cps.getProperty(\"o1\").equals(\"v1\");\nassert cps.getProperty(\"o2\").equals(\"\");\nassert cps.getProperty(\"o3\") == null;\n\n注意：-- 符号在上面的例子中用来表示一个 option 参数，\n这种语法各个命令行参数库可能不同。\n\n3）使用 non-option 参数\n我们把没有 - 或 -- 这样的前缀的命令行的一部分称为 non-option,\n这一类的参数该怎么获取呢？举个栗子：\n--o1=v1 --o2=v2 aaa ccc\n这个例子中 aaa ccc 就是 non-option arguments 了，它在此类的实例中\n可通过如下方式获取：\ncps.getProperty(\"nonOptionArgs\");\n此栗子中满足如下断言：\nassert cps.getProperty(\"nonOptionArgs\").equals(\"aaa,ccc\");\n很显然，多个这样的参数会被逗号分隔开。我们也可以使用此类中定义的\nsetNonOptionArgsPropertyName()方法来指定这些参数的名称，这是一个\n应该被推荐的做法。</value>
      <edge>
        <point x="-65.25" y="-18.0" />
        <point x="1299.9675925925926" y="1564.0" />
        <point x="1112.25" y="1564.0" />
        <point x="0.0" y="666.0" />
      </edge>
    </note>
    <note x="1503.9675925925926" y="0.0">
      <node>org.springframework.core.env.PropertySource</node>
      <value>表示一个 name/value 属性对的一个 source。source 对象\n可以是 Properties， Map, ServletContext, ServletConfig。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="28.0" />
      </edge>
    </note>
    <note x="3517.886111111111" y="2407.0">
      <node>org.springframework.core.env.ReadOnlySystemAttributesMap</node>
      <value>只读的系统属性及环境变量（Map&lt;String, String&gt;）。\n当 SecurityManager 禁止访问 System 时， 被 AbstractApplicationContext\n使用。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="39.0" />
      </edge>
    </note>
    <note x="1277.125" y="2689.0">
      <node>org.springframework.core.env.ConfigurablePropertyResolver</node>
      <value>可配置的 property 解析器接口。几乎所有的 property\n解析器都通过实现此接口来解析 property。它提供了访问\n及自定义 ConversionService 的方法，用于将 property\n转换为其它类型。</value>
      <edge>
        <point x="71.25" y="-18.0" />
        <point x="1410.5" y="3012.0" />
        <point x="1468.625" y="3012.0" />
        <point x="0.0" y="50.0" />
      </edge>
    </note>
    <note x="2447.7175925925926" y="1923.0">
      <node>org.springframework.core.env.PropertiesPropertySource</node>
      <value>在父类的基础上新增了两个构造方法。</value>
      <edge>
        <point x="63.25" y="-18.0" />
        <point x="2542.3425925925926" y="2301.0" />
        <point x="2579.7175925925926" y="2301.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="1202.4675925925926" y="106.0">
      <node>org.springframework.core.env.EnumerablePropertySource</node>
      <value>可枚举的，该接口暴露了 source 的键值对的 names，使得\n用户不需要获取 source 就知道内部含那些 name/value 对。</value>
      <edge>
        <point x="-63.25" y="-18.0" />
        <point x="1495.4675925925926" y="187.0" />
        <point x="1404.4675925925926" y="187.0" />
        <point x="0.0" y="28.0" />
      </edge>
    </note>
    <note x="1693.8861111111112" y="3711.0">
      <node>org.springframework.core.env.StandardEnvironment</node>
      <value>标准环境的实现类（即非Web环境）。除了 ConfigurableEnvironment\n常用功能如：property 解析及 profile 相关操作外，此实现类配置了\n两个默认的 property sources：系统属性、系统环境变量。\n\n如果在JVM 系统属性及当前线程的环境变量中都存在相同 key 的属性，\n当通过 environment.getProperty(key) 方法调用时，系统属性中的值\n将会被返回。因为系统属性在每个 JVM 中可能不同，而环境变量在给\n定系统上的每个 JVM 上都可能是相同的。</value>
      <edge>
        <point x="53.25" y="-18.0" />
        <point x="1433.25" y="3924.0" />
        <point x="1927.3861111111112" y="3924.0" />
        <point x="0.0" y="94.0" />
      </edge>
    </note>
    <note x="1517.236111111111" y="3268.0">
      <node>org.springframework.core.env.AbstractPropertyResolver</node>
      <value>PropertyResolver 的抽象实现。</value>
      <edge>
        <point x="63.25" y="-18.0" />
        <point x="1582.6361111111112" y="3558.0" />
        <point x="1631.736111111111" y="3558.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="1785.7175925925926" y="1901.0">
      <node>org.springframework.core.env.SystemEnvironmentPropertySource</node>
      <value>系统环境属性对，特别注意的是，当通过 get 方法获取value\n时，若不存在这样的 name，name传入的 name 将会被转换为大写\n且点符号及连接线会被转换为下划线。</value>
      <edge>
        <point x="-77.25" y="-18.0" />
        <point x="2061.8425925925926" y="2301.0" />
        <point x="1998.2175925925926" y="2301.0" />
        <point x="0.0" y="39.0" />
      </edge>
    </note>
    <note x="2815.886111111111" y="2407.0">
      <node>org.springframework.core.env.PropertySources</node>
      <value>一个或多个 PropertySource 的 holder。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="1515.7175925925926" y="1923.0">
      <node>org.springframework.core.env.JOptCommandLinePropertySource</node>
      <value>使用 JOpt 来解析命令行参数信息。</value>
      <edge>
        <point x="73.25" y="-18.0" />
        <point x="1608.8425925925926" y="2301.0" />
        <point x="1640.7175925925926" y="2301.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="2274.999999999999" y="281.50000000000045">
      <node>org.springframework.core.env.SimpleCommandLinePropertySource</node>
      <value>由简单的String 数组实现。\n1. 目的\n提供最简单的方式来解析命令行参数。与所有的 CommandLinePropertySource \n的实现类一样，命令行参数被分为两类：option arguments、non-option arguments。\n下面是 SimpleCommandLineArgsParser 中的部分注释：\n1）使用 option arguments\noption arguments 必须遵守固定的语法：\n  --optName[=optValue]\n也就是option 必须以 “--”作为前缀，可以指定值或不指定值。若需要指定一个值，\n那么option 必须与 value 通过“=”相连，且中间不能存在空格。下面是有效的参数：\n  --foo\n  --foo=bar\n  --foo=\"bar then baz\"\n  --foo=bar,baz,biz\n下面是无效 option arguments：\n  -foo\n  --foo bar\n  --foo = bar\n  --foo=bar --foo=baz --foo=biz\n2）使用 non-option arguments\n任意为指定“--”为前缀的参数都将被认为是 non-option arguments，可通过\ngetNonOptionArgs()方法获取。\n\n2. 典型用法\n  public static main(String[] args) {\n    PropertySource ps = new SimpleCommandLinePropertySource(args);\n    ...\n  }\n可查看 CommandLinePropertySource 注释的用法。当需要更高级的命令行解析时，请使用\nJOptCommandLinePropertySource，也可以自己实现。</value>
      <edge>
        <point x="-77.25" y="-18.0" />
        <point x="811.3425925925925" y="2301.0" />
        <point x="289.5" y="2301.0" />
        <point x="0.0" y="336.0" />
      </edge>
    </note>
    <note x="468.75" y="839.0">
      <node>org.springframework.core.env.CompositePropertySource</node>
      <value>组合 source，持有一个 PropertySource 的 set 集合，\n此类实例获取value 时，会遍历 这个集合获取，只要获取\n到值就会返回 value。</value>
      <edge>
        <point x="-61.25" y="-18.0" />
        <point x="0.0" y="39.0" />
      </edge>
    </note>
    <note x="2205.886111111111" y="2407.0">
      <node>org.springframework.core.env.SimpleCommandLineArgsParser</node>
      <value>解析String[]，并填充 ComandLineArgs 对象。\n1）使用 option arguments\noption arguments 必须遵守固定的语法：\n  --optName[=optValue]\n也就是option 必须以 “--”作为前缀，可以指定值或不指定值。若需要指定一个值，\n那么option 必须与 value 通过“=”相连，且中间不能存在空格。下面是有效的参数：\n  --foo\n  --foo=bar\n  --foo=\"bar then baz\"\n  --foo=bar,baz,biz\n下面是无效 option arguments：\n  -foo\n  --foo bar\n  --foo = bar\n  --foo=bar --foo=baz --foo=biz\n2）使用 non-option arguments\n任意为指定“--”为前缀的参数都将被认为是 non-option arguments，可通过\ngetNonOptionArgs()方法获取。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="204.0" />
      </edge>
    </note>
    <note x="981.5" y="4030.0">
      <node>org.springframework.core.env.MissingRequiredPropertiesException</node>
      <value>当需要的 property 不存在时，抛出此异常。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="499.375" y="3037.0">
      <node>org.springframework.core.env.ConfigurableEnvironment</node>
      <value>大多数 Environment 类型的类都实现自此接口。它提供配置 激活态的 profile\n及默认激活的 profiles 并且可以对底层的 property 资源进行操作。允许客户端\n通过 ConfigurablePropertyResolver 设置或者验证需要的 properties及自定义 \nConversionService。\n!! 操作 property 资源：\nproperty 资源可以被删除、重排序、替换，另外，资源可以通过 getPropertySources()\n方法返回的 MutablePropertySource 实例进行添加操作，例子：\n1) 添加新的 property 资源：\nConfigurableEnvironment env = new StandartEnvironment();\nMutablePropertySources ps = env.getPropertySources();\nMap map = new HashMap();\nmap.put(\"count\", 1);\nps.addFirst(new MapPropertySource(\"countMap\", map));\n2) 移除\nps.remove(\"countMap\");\n3) 替换\nps.replace(\"countMap\", map);\n!! 注意\n当 ApplicationContext 执行 refresh() 方法之前，会执行\nPropertySource 相关的所有操作，因为 ApplicationContext \n要确保在执行容器引导之前，所有的属性都是可用的。包括属性\n占位符配置也会在这之前进行。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="248.0" />
      </edge>
    </note>
    <note x="707.875" y="2407.0">
      <node>org.springframework.core.env.PropertyResolver</node>
      <value>对于任何底层的资源，解析其属性的解析器接口。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="575.0" y="4030.0">
      <node>org.springframework.core.env.CommandLineArgs</node>
      <value>命令行参数的简单表示，包括：option arguments，\nnon-option arguments。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="28.0" />
      </edge>
    </note>
    <note x="0.0" y="2491.0">
      <node>org.springframework.core.env.Environment</node>
      <value>接口表示当前应用正处于怎样的环境下。应用环境的两个关键\n方面是：properties、profile。与 properties 相关的操作由其\n父接口 PropertyResolver 提供。仅当给定 profile 处于激活状态\n时，这个 profile 的 bean 定义才会被注册到容器中。不管 bean \n通过 XML 还是注解定义，都会被分配给一个 profile。\n1. profile 方面：\n与 profile 关联的 Environment 对象的作用是决定哪些 profile \n当前处于激活状态以及哪些 profile 应该默认激活。\n2. properties 方面：\nproperties 在几乎所有的应用中都扮演者重要的角色，并且properties\n可以来自于多种方式，如：properties 文件，JVM 系统属性，系统环境\n变量，JNDI，servlet上下文参数，ad-hoc 属性对象，Map 等。\n与 properties 关联的 Environment 对象的作用是为用户提供方便的接\n口来配置 properties 资源以及解析 properties 资源。\n\n被 ApplicationContext 管理的 bean 可以通过实现 EnvironmentAware\n接口或者直接使用 @Inject 注入 Environment 的实例。但是普通的bean\n不应该直接与 Environment 进行交互，若需要获取 Environment 内的数\n据，可以使用占位符注入 Environment 内的数据内容 ${..}。\n\n必须通过ConfigurableEnvironment接口完成环境对象的配置，环境对象可以\n从所 AbstractApplicationContext 子类的 getEnvironment（）方法返回。</value>
      <edge>
        <point x="-37.25" y="-18.0" />
        <point x="367.625" y="3012.0" />
        <point x="247.5" y="3012.0" />
        <point x="0.0" y="248.0" />
      </edge>
    </note>
    <note x="2235.9675925925926" y="861.0">
      <node>org.springframework.core.env.MapPropertySource</node>
      <value>source instanceOf Map&lt;String, Objetc&gt;</value>
      <edge>
        <point x="49.25" y="-18.0" />
        <point x="0.0" y="17.0" />
      </edge>
    </note>
    <note x="0.0" y="4030.0">
      <node>org.springframework.core.env.EnvironmentCapable</node>
      <value>实现此接口表名会暴露 Environment 引用（getEnvironment()）。所有的Spring \nApplicationContext 都会实现此接口。</value>
      <edge>
        <point x="0.0" y="-18.0" />
        <point x="0.0" y="28.0" />
      </edge>
    </note>
    <note x="3068.886111111111" y="2491.0">
      <node>org.springframework.core.env.MutablePropertySources</node>
      <value>PropertySources 的默认实现，允许操作 PropertySource 及\n含一个复制现有 PropertySources 的构造方法。</value>
      <edge>
        <point x="59.25" y="-18.0" />
        <point x="3173.886111111111" y="2572.0" />
        <point x="3270.886111111111" y="2572.0" />
        <point x="0.0" y="28.0" />
      </edge>
    </note>
    <note x="927.875" y="3583.0">
      <node>org.springframework.core.env.AbstractEnvironment</node>
      <value>实现 Environment 的抽象基类。支持保存默认的 profile\n的名称及激活 profile的名称：ACTIVE_PROFILES_PROPERTY_NAME、\nDEFAULT_PROFILES_PROPERTY_NAME。</value>
      <edge>
        <point x="53.25" y="-18.0" />
        <point x="1019.625" y="3686.0" />
        <point x="1147.375" y="3686.0" />
        <point x="0.0" y="39.0" />
      </edge>
    </note>
  </notes>
  <edges>
    <edge source="org.springframework.core.env.SimpleCommandLinePropertySource" target="org.springframework.core.env.CommandLinePropertySource">
      <point x="77.25" y="-18.0" />
      <point x="965.8425925925925" y="2301.0" />
      <point x="1299.9675925925926" y="2301.0" />
      <point x="-65.25" y="18.0" />
    </edge>
    <edge source="org.springframework.core.env.SystemEnvironmentPropertySource" target="org.springframework.core.env.MapPropertySource">
      <point x="77.25" y="-18.0" />
      <point x="2216.3425925925926" y="2301.0" />
      <point x="2279.9675925925926" y="2301.0" />
      <point x="-49.25" y="18.0" />
    </edge>
    <edge source="org.springframework.core.env.PropertiesPropertySource" target="org.springframework.core.env.MapPropertySource">
      <point x="-63.25" y="-18.0" />
      <point x="2415.8425925925926" y="2301.0" />
      <point x="2378.4675925925926" y="2301.0" />
      <point x="49.25" y="18.0" />
    </edge>
    <edge source="org.springframework.core.env.PropertySourcesPropertyResolver" target="org.springframework.core.env.AbstractPropertyResolver">
      <point x="0.0" y="-18.0" />
      <point x="0.0" y="18.0" />
    </edge>
    <edge source="org.springframework.core.env.CommandLinePropertySource" target="org.springframework.core.env.EnumerablePropertySource">
      <point x="65.25" y="-18.0" />
      <point x="1430.4675925925926" y="1584.0" />
      <point x="1558.7175925925926" y="1584.0" />
      <point x="0.0" y="18.0" />
    </edge>
    <edge source="org.springframework.core.env.ConfigurableEnvironment" target="org.springframework.core.env.ConfigurablePropertyResolver">
      <point x="81.66666666666663" y="-18.0" />
      <point x="867.0416666666666" y="3558.0" />
      <point x="1268.0" y="3558.0" />
      <point x="-71.25" y="18.0" />
    </edge>
    <edge source="org.springframework.core.env.ConfigurableEnvironment" target="org.springframework.core.env.Environment">
      <point x="-81.66666666666674" y="-18.0" />
      <point x="703.7083333333333" y="3558.0" />
      <point x="404.875" y="3558.0" />
      <point x="0.0" y="18.0" />
    </edge>
    <edge source="org.springframework.core.env.AbstractPropertyResolver" target="org.springframework.core.env.ConfigurablePropertyResolver">
      <point x="-63.25" y="-18.0" />
      <point x="1456.1361111111112" y="3558.0" />
      <point x="1410.5" y="3558.0" />
      <point x="71.25" y="18.0" />
    </edge>
    <edge source="org.springframework.core.env.CompositePropertySource" target="org.springframework.core.env.EnumerablePropertySource">
      <point x="61.25" y="-18.0" />
      <point x="782.7499999999999" y="1574.0" />
      <point x="1474.3842592592591" y="1574.0" />
      <point x="-84.33333333333326" y="18.0" />
    </edge>
    <edge source="org.springframework.core.env.ConfigurablePropertyResolver" target="org.springframework.core.env.PropertyResolver">
      <point x="-71.25" y="-18.0" />
      <point x="1268.0" y="3012.0" />
      <point x="922.125" y="3012.0" />
      <point x="47.25" y="18.0" />
    </edge>
    <edge source="org.springframework.core.env.JOptCommandLinePropertySource" target="org.springframework.core.env.CommandLinePropertySource">
      <point x="-73.25" y="-18.0" />
      <point x="1462.3425925925926" y="2301.0" />
      <point x="1430.4675925925926" y="2301.0" />
      <point x="65.25" y="18.0" />
    </edge>
    <edge source="org.springframework.core.env.Environment" target="org.springframework.core.env.PropertyResolver">
      <point x="37.25" y="-18.0" />
      <point x="442.125" y="3012.0" />
      <point x="827.625" y="3012.0" />
      <point x="-47.25" y="18.0" />
    </edge>
    <edge source="org.springframework.core.env.AbstractEnvironment" target="org.springframework.core.env.ConfigurableEnvironment">
      <point x="-53.25" y="-18.0" />
      <point x="913.125" y="3686.0" />
      <point x="785.375" y="3686.0" />
      <point x="0.0" y="18.0" />
    </edge>
    <edge source="org.springframework.core.env.MutablePropertySources" target="org.springframework.core.env.PropertySources">
      <point x="-59.25" y="-18.0" />
      <point x="3055.386111111111" y="2572.0" />
      <point x="2958.386111111111" y="2572.0" />
      <point x="0.0" y="18.0" />
    </edge>
    <edge source="org.springframework.core.env.EnumerablePropertySource" target="org.springframework.core.env.PropertySource">
      <point x="63.25" y="-18.0" />
      <point x="1621.9675925925926" y="187.0" />
      <point x="1712.9675925925926" y="187.0" />
      <point x="0.0" y="18.0" />
    </edge>
    <edge source="org.springframework.core.env.StandardEnvironment" target="org.springframework.core.env.AbstractEnvironment">
      <point x="-53.25" y="-18.0" />
      <point x="1326.75" y="3924.0" />
      <point x="966.375" y="3924.0" />
      <point x="0.0" y="18.0" />
    </edge>
    <edge source="org.springframework.core.env.MapPropertySource" target="org.springframework.core.env.EnumerablePropertySource">
      <point x="-49.25" y="-18.0" />
      <point x="2279.9675925925926" y="1584.0" />
      <point x="1643.0509259259256" y="1584.0" />
      <point x="84.33333333333326" y="18.0" />
    </edge>
  </edges>
  <settings layout="Hierarchic Group" zoom="0.40000000000000013" x="2144.999999999999" y="816.7499999999918" />
  <SelectedNodes />
  <Categories />
  <SCOPE>All</SCOPE>
  <VISIBILITY>public</VISIBILITY>
</Diagram>

